{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["data","require","keyword_extractor","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChooseText","event","id","target","attributes","value","choosenText","find","item","Number","setState","text","handleInnputChange","defineProperty","name","extractWords","_this$state","state","selectedLanguage","extractionResult","extract","language","remove_digits","return_changed_case","remove_duplicates","extractedWords","join","document","title","_this$state2","react_default","a","createElement","className","onClick","map","_ref","key","id-of-comment","src","logo","alt","onChange","rows","disabled","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"4wt9QAIIA,SAAOC,EAAQ,KACbC,EAAoBD,EAAQ,IAyEnBE,cAtEb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QASFI,iBAAmB,SAACC,GAClB,IAAMC,EAAKD,EAAME,OAAOC,WAAW,iBAAiBC,MAC9CC,EAAcjB,EAAKkB,KAAK,SAAAC,GAAI,OAAIA,EAAKN,KAAOO,OAAOP,KAEzDT,EAAKiB,SAAS,CAAEC,KAAML,EAAYK,QAdtBlB,EAiBdmB,mBAAqB,SAACX,GACpBR,EAAKiB,SAALhB,OAAAmB,EAAA,EAAAnB,CAAA,GAAiBO,EAAME,OAAOW,KAAOb,EAAME,OAAOE,SAlBtCZ,EAqBdsB,aAAe,WAAM,IAAAC,EACgBvB,EAAKwB,MAAhCN,EADWK,EACXL,KAAMO,EADKF,EACLE,iBACRC,EAAmB5B,EAAkB6B,QAAQT,EAAK,CACtDU,SAAUH,EACVI,eAAe,EACfC,qBAAoB,EACpBC,mBAAmB,IAGrB/B,EAAKiB,SAAS,CAAEe,eAAgBN,EAAiBO,KAAK,SA5BtDjC,EAAKwB,MAAQ,CACXN,KAAM,GACNc,eAAgB,GAChBP,iBAAkB,WAEpBS,SAASC,MAAQ,oBAPLnC,wEAiCL,IAAAoC,EAC0BjC,KAAKqB,MAA9BN,EADDkB,EACClB,KAAMc,EADPI,EACOJ,eAEd,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,MAAIE,QAAStC,KAAKI,kBACfX,EAAK8C,IAAI,SAAAC,GAAA,IAAGtB,EAAHsB,EAAGtB,KAAMZ,EAATkC,EAASlC,GAAT,OACR4B,EAAAC,EAAAC,cAAA,MAAIK,IAAKnC,EAAIoC,gBAAepC,GAAKY,OAIvCgB,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACdH,EAAAC,EAAAC,cAAA,OAAKO,IAAKC,IAAMP,UAAU,WAAWQ,IAAI,SACzCX,EAAAC,EAAAC,cAAA,gCAEFF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQlB,KAAK,mBAAmB4B,SAAU9C,KAAKgB,oBAC7CkB,EAAAC,EAAAC,cAAA,UAAQ3B,MAAM,WAAd,WACAyB,EAAAC,EAAAC,cAAA,UAAQ3B,MAAM,WAAd,WACAyB,EAAAC,EAAAC,cAAA,UAAQ3B,MAAM,UAAd,UACAyB,EAAAC,EAAAC,cAAA,UAAQ3B,MAAM,UAAd,UACAyB,EAAAC,EAAAC,cAAA,UAAQ3B,MAAM,WAAd,YAEFyB,EAAAC,EAAAC,cAAA,YAAUlB,KAAK,OAAO6B,KAAM,GAAItC,MAAOM,EAAM+B,SAAU9C,KAAKgB,qBAC5DkB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQE,QAAStC,KAAKmB,cAAtB,YAEFe,EAAAC,EAAAC,cAAA,YAAUW,KAAM,GAAIC,UAAQ,EAACvC,MAAOoB,cA/D9BoB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAAS1B,SAAS2B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.8cf6edf7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nvar data = require('./text.json'); \nconst keyword_extractor = require(\"keyword-extractor\");\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      text: '',\n      extractedWords: '',\n      selectedLanguage: 'russian'\n    }\n    document.title = \"Keyword Extractor\";\n  }\n\n  handleChooseText = (event) => {\n    const id = event.target.attributes['id-of-comment'].value;\n    const choosenText = data.find(item => item.id === Number(id));\n    \n    this.setState({ text: choosenText.text });\n  }\n\n  handleInnputChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  } \n\n  extractWords = () => {\n    const { text, selectedLanguage } = this.state;\n    const extractionResult = keyword_extractor.extract(text,{\n      language: selectedLanguage,\n      remove_digits: true,\n      return_changed_case:true,\n      remove_duplicates: false\n    });\n\n    this.setState({ extractedWords: extractionResult.join(', ') })\n  }\n\n  render() {\n    const { text, extractedWords } = this.state;\n\n    return (\n      <div className=\"App\">\n      <aside>\n        <ul onClick={this.handleChooseText}>\n          {data.map(({ name, id }) => (\n            <li key={id} id-of-comment={id}>{name}</li>\n          ))}\n        </ul>\n      </aside>\n      <main>\n        <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <h2>Keyword Extractor</h2>\n          </header>\n          <div>\n            <select name=\"selectedLanguage\" onChange={this.handleInnputChange}>\n              <option value=\"russian\">Russian</option>\n              <option value=\"english\">English</option>\n              <option value=\"polish\">Polish</option>\n              <option value=\"german\">German</option>\n              <option value=\"spanish\">Spanish</option>\n            </select>\n            <textarea name=\"text\" rows={10} value={text} onChange={this.handleInnputChange}></textarea>\n            <div>\n              <button onClick={this.extractWords}>Extract</button>\n            </div>\n            <textarea rows={10} disabled value={extractedWords}></textarea>\n          </div>\n      </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}